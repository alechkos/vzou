{
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": [
    "react-app",
    "react-app/jest",
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "prettier",
    // "prettier/@typescript-eslint"
    // https://blog.theodo.com/2019/08/empower-your-dev-environment-with-eslint-prettier-and-editorconfig-with-no-conflicts/
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": "latest",
    "project": "./tsconfig.json",
    "sourceType": "module"
  },
  "plugins": [
    "react",
    "react-hooks",
    "@typescript-eslint",
    "import",
    "simple-import-sort",
    "prettier"
  ],
  "rules": {
    "max-len": [
      "warn",
      {
        "code": 100,
        "ignoreComments": true,
        "ignoreUrls": true
      }
    ],
    "no-empty": ["error", { "allowEmptyCatch": true }],
    "no-console": ["warn", { "allow": ["warn", "error"] }],
    "array-bracket-spacing": ["error", "always", { "objectsInArrays": false }],
    "arrow-spacing": ["error", { "before": true, "after": true }],
    "eqeqeq": "error",
    "import/first": "error",
    "import/newline-after-import": ["error", { "count": 2 }],
    "import/no-empty-named-blocks": "error",
    "import/no-mutable-exports": "error",
    "import/no-unresolved": "error",
    "import/prefer-default-export": "off",
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "index",
          "sibling",
          "parent",
          "object",
          "unknown"
        ],
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ],
    "@typescript-eslint/member-delimiter-style": "error",
    "@typescript-eslint/array-type": "error",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/ban-ts-comment": "error",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-confusing-non-null-assertion": "error",
    "@typescript-eslint/no-confusing-void-expression": "error",
    "@typescript-eslint/no-meaningless-void-operator": "error",
    "@typescript-eslint/no-mixed-enums": "error",
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/no-useless-empty-export": "error",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": ["typeLike"],
        "format": ["PascalCase"],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": ["function", "objectLiteralProperty"],
        "format": ["camelCase", "PascalCase"],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": ["enumMember"],
        "format": ["camelCase", "PascalCase", "UPPER_CASE"],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": "variable",
        "format": ["camelCase", "PascalCase", "UPPER_CASE"],
        "modifiers": ["exported"],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": "variable",
        "format": ["camelCase", "PascalCase"],
        "types": ["function"],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": ["method", "parameterProperty", "property", "classMethod", "objectLiteralMethod", "typeMethod"],
        "format": ["camelCase"],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": "property",
        "format": ["camelCase", "UPPER_CASE"],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid",
        "filter": {
          "regex": "^.$",
          "match": true
        }
      }
    ],
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "react/prop-types": "off",
    "react/react-in-jsx-scope": "off",
    "react/jsx-uses-react": "off",
    "react/jsx-filename-extension": ["warn", { "extensions": [".tsx"] }],
    "no-extra-semi": "off",
    "@typescript-eslint/no-extra-semi": "error",
    "no-array-constructor": "off",
    "@typescript-eslint/no-array-constructor": "error",
    "comma-spacing": "off",
    "@typescript-eslint/comma-spacing": ["error", { "before": false, "after": true }],
    "keyword-spacing": "off",
    "@typescript-eslint/keyword-spacing": ["error", { "before": true, "after": true }],
    "key-spacing": "off",
    "@typescript-eslint/key-spacing": ["error", { "beforeColon": false, "afterColon": true }],
    "indent": "off",
    "@typescript-eslint/indent": ["error", 2],
    "block-spacing": "off",
    "@typescript-eslint/block-spacing": ["error", "always"],
    "quotes": "off",
    "@typescript-eslint/quotes": ["error", "double"],
    "semi": "off",
    "@typescript-eslint/semi": ["error", "always"],
    "object-curly-spacing": "off",
    "@typescript-eslint/object-curly-spacing": ["error", "always"],
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": "error",
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": "warn",
    "comma-dangle": "off",
    "@typescript-eslint/comma-dangle": ["error", "always-multiline"],
    // "prettier/prettier": "error"
  },
  "root": true,
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "./tsconfig.json"
      },
      "node": {
        "paths": ["src"],
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    }
  }
}